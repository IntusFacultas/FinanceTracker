datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Record {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(cuid())
  date          DateTime
  value         Float
  reporter      User      @relation(fields: [reporterID], references: [id], onDelete: Cascade)
  reporterID    Int       @map("reporter_id")
  category      Category  @relation(fields: [categoryID], references: [id])
  categoryID    Int       @map("category_id")

  @@unique([id, uuid])
  @@index(fields: [date, reporterID], name: "record_by_date_and_reporter_id_idx")
  @@index(fields: [reporterID], name: "record_by_reporter_id_idx")
}

model Category {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(cuid())
  title         String
  records       Record[]
  reporter      User          @relation(fields: [reporterID], references: [id], onDelete: Cascade)
  reporterID    Int           @map("reporter_id")

  @@unique([id, uuid])
  @@unique([title, reporterID])
  @@index(fields: [title], name: "category_by_title_idx")
  @@index(fields: [id], name: "category_by_id_idx")
}

model SharePermission {
  id              Int     @id @default(autoincrement())
  authorizer      User    @relation("permissions_granted", fields: [authorizerID], references: [id], onDelete: Cascade)
  authorizerID    Int     @map("authorizer_id")
  recipient       User    @relation("permissions_received", fields: [recipientID], references: [id], onDelete: Cascade)
  recipientID     Int     @map("recipient_id")

  @@index(fields: [authorizerID, recipientID], name: "share_permission_by_authorizer_and_recipient_idx")
  @@index(fields: [recipientID, authorizerID], name: "share_permission_by_recipient_and_authorizer_idx")
}

model User {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(cuid())
  name                String?
  email               String?             @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  categories          Category[]
  sessions            Session[]
  records             Record[]
  permissionsGranted  SharePermission[]     @relation("permissions_granted")
  permissionsReceived SharePermission[]     @relation("permissions_received")
  @@unique([id, uuid])
  @@index(fields: [id, uuid], name: "user_by_id_idx")
}

// ************************
// *      AUTH MODELS     *
// ************************

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique @map("user_id")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}



model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

